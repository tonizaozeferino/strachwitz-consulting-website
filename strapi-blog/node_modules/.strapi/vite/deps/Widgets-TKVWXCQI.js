import {
  RelativeTime
} from "./chunk-DPJ26IRR.js";
import {
  getDefaultMessage,
  useGetAuditLogsQuery
} from "./chunk-XGXXT66M.js";
import "./chunk-YIMQRVHF.js";
import "./chunk-ZCHXR5VO.js";
import "./chunk-3OG5BZ7J.js";
import "./chunk-3DCT4C23.js";
import {
  Widget
} from "./chunk-AE4DOCE6.js";
import "./chunk-W4PRAMI6.js";
import "./chunk-MQRGIX6T.js";
import "./chunk-QIJGNK42.js";
import "./chunk-AMZFFT4G.js";
import "./chunk-I2US6VWN.js";
import {
  AUDIT_LOGS_DEFAULT_PAGE_SIZE
} from "./chunk-5OFYPWQW.js";
import "./chunk-N27VMS6G.js";
import "./chunk-SFE7A3PK.js";
import "./chunk-7B72BQBK.js";
import "./chunk-JTU4BKPL.js";
import "./chunk-YWR2IQH7.js";
import "./chunk-JET2CIIK.js";
import "./chunk-U3K56MYR.js";
import "./chunk-ZONEAF55.js";
import "./chunk-CFCDJRTW.js";
import "./chunk-Z4BRCVEX.js";
import "./chunk-Q6JMXRJ7.js";
import "./chunk-PMGMZVLF.js";
import "./chunk-NF5IFBZD.js";
import "./chunk-LOKUGSGX.js";
import "./chunk-3RYXZAWR.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-CBGF7THM.js";
import "./chunk-K65KIEAL.js";
import "./chunk-4PNCDZYG.js";
import "./chunk-4CNMOGUS.js";
import "./chunk-5QHUAR2G.js";
import "./chunk-DSFU6ZES.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-QWCB7MV2.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-S6BOZAEJ.js";
import "./chunk-SWV54OZA.js";
import {
  useTracking
} from "./chunk-TVA5ZKVZ.js";
import "./chunk-CFHLQ5JY.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import "./chunk-GQY2EWW2.js";
import {
  useQueryParams
} from "./chunk-OS275BNX.js";
import "./chunk-WFS3KGXC.js";
import "./chunk-F5EGAWJ2.js";
import "./chunk-EQWQTUFN.js";
import "./chunk-OXMMBAOO.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-76QM3EFM.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-NZRYZCC5.js";
import "./chunk-5ZC4PE57.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$3L
} from "./chunk-VG5GJPFG.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/ee/admin/src/components/AuditLogs/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var RelativeTime2 = dt(RelativeTime)`
  display: inline-block;

  &::first-letter {
    text-transform: uppercase;
  }
`;
var LastActivityTable = ({ items }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getAuditLogDetailsLink = (item) => {
    return `/settings/audit-logs?pageSize=${AUDIT_LOGS_DEFAULT_PAGE_SIZE}&page=1&sort=date:DESC&id=${item.id}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willOpenAuditLogDetailsFromHome");
    const link = getAuditLogDetailsLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 4,
    rowCount: (items == null ? void 0 : items.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: items == null ? void 0 : items.map((item) => {
        var _a;
        const action = formatMessage({
          id: `Settings.permissions.auditLogs.${item.action}`,
          // @ts-expect-error â€“ getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.
          defaultMessage: getDefaultMessage(item.action)
        }, {
          model: item.payload.model ?? ""
        });
        const userDisplayName = ((_a = item.user) == null ? void 0 : _a.displayName) ?? "-";
        return (0, import_jsx_runtime.jsxs)(Tr, {
          onClick: handleRowClick(item),
          cursor: "pointer",
          children: [
            (0, import_jsx_runtime.jsx)(Td, {
              children: (0, import_jsx_runtime.jsx)(Typography, {
                title: action,
                variant: "omega",
                textColor: "neutral800",
                children: action
              })
            }),
            (0, import_jsx_runtime.jsx)(Td, {
              children: (0, import_jsx_runtime.jsx)(Typography, {
                variant: "omega",
                textColor: "neutral800",
                children: (0, import_jsx_runtime.jsx)(RelativeTime2, {
                  timestamp: new Date(item.date)
                })
              })
            }),
            (0, import_jsx_runtime.jsx)(Td, {
              children: (0, import_jsx_runtime.jsx)(Typography, {
                title: userDisplayName,
                variant: "omega",
                textColor: "neutral800",
                children: userDisplayName
              })
            }),
            (0, import_jsx_runtime.jsx)(Td, {
              onClick: (e) => e.stopPropagation(),
              children: (0, import_jsx_runtime.jsx)(Box, {
                display: "inline-block",
                children: (0, import_jsx_runtime.jsx)(IconButton, {
                  tag: Link,
                  to: getAuditLogDetailsLink(item),
                  onClick: () => trackUsage("willOpenAuditLogDetailsFromHome"),
                  label: formatMessage({
                    id: "global.details",
                    defaultMessage: "Details"
                  }),
                  variant: "ghost",
                  children: (0, import_jsx_runtime.jsx)(ForwardRef$3L, {})
                })
              })
            })
          ]
        }, `lastActivity_auditLog_${item.id}`);
      })
    })
  });
};
var AuditLogsWidget = () => {
  const { formatMessage } = useIntl();
  const [{ query }] = useQueryParams();
  const { data, isLoading, error } = useGetAuditLogsQuery({
    ...query,
    page: 1,
    pageSize: 4,
    sort: "date:DESC"
  }, {
    refetchOnMountOrArgChange: true
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !(data == null ? void 0 : data.results)) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.results.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "widget.last-activity.no-activity",
        defaultMessage: "No activity"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(LastActivityTable, {
    items: data.results ?? []
  });
};
export {
  AuditLogsWidget
};
//# sourceMappingURL=Widgets-TKVWXCQI.js.map
