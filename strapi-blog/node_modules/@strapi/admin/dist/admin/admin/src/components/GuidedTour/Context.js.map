{"version":3,"file":"Context.js","sources":["../../../../../../admin/src/components/GuidedTour/Context.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { usePersistentState } from '../../hooks/usePersistentState';\nimport { createContext } from '../Context';\n\nimport { type Tours, tours as guidedTours } from './Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from './utils/constants';\nimport { migrateTours } from './utils/migrations';\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype ValidTourName = keyof Tours;\n\n/**\n * Derive the union of all string literal values from GUIDED_TOUR_REQUIRED_ACTIONS\n * (ie didCreateContentTypeSchema | didCreateContent etc...)\n */\ntype ValueOf<T> = T[keyof T];\ntype NonEmptyValueOf<T> = T extends Record<string, never> ? never : ValueOf<T>;\nexport type CompletedActions = NonEmptyValueOf<ValueOf<typeof GUIDED_TOUR_REQUIRED_ACTIONS>>[];\n\ntype Action =\n  | {\n      type: 'next_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'previous_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'go_to_step';\n      payload: {\n        tourName: ValidTourName;\n        step: number;\n      };\n    }\n  | {\n      type: 'skip_tour';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'skip_all_tours';\n    }\n  | {\n      type: 'reset_all_tours';\n    }\n  | {\n      type: 'set_completed_actions';\n      payload: CompletedActions;\n    }\n  | {\n      type: 'remove_completed_action';\n      payload: ValueOf<CompletedActions>;\n    };\n\ntype TourState = Record<ValidTourName, { currentStep: number; isCompleted: boolean }>;\ntype State = {\n  tours: TourState;\n  enabled: boolean;\n  completedActions: CompletedActions;\n};\n\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>('GuidedTour');\n\nconst getInitialTourState = (tours: Tours) => {\n  return Object.keys(tours).reduce((acc, tourName) => {\n    acc[tourName as ValidTourName] = {\n      currentStep: 0,\n      isCompleted: false,\n    };\n\n    return acc;\n  }, {} as TourState);\n};\n\nfunction reducer(state: State, action: Action): State {\n  return produce(state, (draft) => {\n    if (action.type === 'next_step') {\n      const currentStep = draft.tours[action.payload].currentStep;\n      const tourLength = guidedTours[action.payload]._meta.totalStepCount;\n\n      if (currentStep >= tourLength) return;\n\n      const nextStep = currentStep + 1;\n      draft.tours[action.payload].currentStep = nextStep;\n      draft.tours[action.payload].isCompleted = nextStep === tourLength;\n    }\n\n    if (action.type === 'previous_step') {\n      const currentStep = draft.tours[action.payload].currentStep;\n\n      if (currentStep <= 0) return;\n\n      const previousStep = currentStep - 1;\n      draft.tours[action.payload].currentStep = previousStep;\n    }\n\n    if (action.type === 'skip_tour') {\n      draft.tours[action.payload].isCompleted = true;\n    }\n\n    if (action.type === 'set_completed_actions') {\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\n    }\n\n    if (action.type === 'remove_completed_action') {\n      draft.completedActions = draft.completedActions.filter(\n        (completedAction) => completedAction !== action.payload\n      );\n    }\n\n    if (action.type === 'skip_all_tours') {\n      draft.enabled = false;\n    }\n\n    if (action.type === 'reset_all_tours') {\n      draft.enabled = true;\n      draft.tours = getInitialTourState(guidedTours);\n      draft.completedActions = [];\n    }\n\n    if (action.type === 'go_to_step') {\n      draft.tours[action.payload.tourName].currentStep = action.payload.step;\n    }\n  });\n}\n\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\nconst GuidedTourContext = ({\n  children,\n  enabled = true,\n}: {\n  children: React.ReactNode;\n  enabled?: boolean;\n}) => {\n  const [storedTours, setStoredTours] = usePersistentState<State>(STORAGE_KEY, {\n    tours: getInitialTourState(guidedTours),\n    enabled,\n    completedActions: [],\n  });\n  const migratedTourState = migrateTours(storedTours);\n  const [state, dispatch] = React.useReducer(reducer, migratedTourState);\n\n  // Sync local storage\n  React.useEffect(() => {\n    setStoredTours(state);\n  }, [state, setStoredTours]);\n\n  return (\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\nexport type { Action, State, ValidTourName };\nexport { GuidedTourContext, useGuidedTour, reducer };\n"],"names":["GuidedTourProviderImpl","useGuidedTour","createContext","getInitialTourState","tours","Object","keys","reduce","acc","tourName","currentStep","isCompleted","reducer","state","action","produce","draft","type","payload","tourLength","guidedTours","_meta","totalStepCount","nextStep","previousStep","completedActions","Set","filter","completedAction","enabled","step","STORAGE_KEY","GuidedTourContext","children","storedTours","setStoredTours","usePersistentState","migratedTourState","migrateTours","dispatch","React","useReducer","useEffect","_jsx"],"mappings":"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"}