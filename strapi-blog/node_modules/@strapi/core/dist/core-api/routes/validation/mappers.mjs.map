{"version":3,"file":"mappers.mjs","sources":["../../../../src/core-api/routes/validation/mappers.ts"],"sourcesContent":["/**\n * @fileoverview\n * This file contains functions responsible for mapping Strapi attribute definitions to Zod schemas.\n */\n\nimport type { Schema } from '@strapi/types';\nimport * as z from 'zod/v4';\n\n// eslint-disable-next-line import/no-cycle\nimport * as attributes from './attributes';\n\n/**\n * Creates a Zod schema for a collection of Strapi attributes.\n *\n * @param attributes - An array of tuples, where each tuple contains the attribute name and its schema definition.\n * @returns A Zod object schema representing the combined attributes.\n *\n * @example\n * ```typescript\n * const myAttributes = [\n *   ['title', { type: 'string', required: true }],\n *   ['description', { type: 'text' }],\n * ];\n * const schema = createAttributesSchema(myAttributes);\n * // schema will be a Zod object with 'title' and 'description' fields,\n * // each mapped to their respective Zod schemas based on their Strapi attribute types.\n * ```\n */\nexport const createAttributesSchema = (\n  attributes: [name: string, attribute: Schema.Attribute.AnyAttribute][]\n) => {\n  return attributes.reduce((acc, [name, attribute]) => {\n    return acc.extend({\n      get [name]() {\n        return mapAttributeToSchema(attribute);\n      },\n    });\n  }, z.object({}));\n};\n\n/**\n * Creates a Zod input schema for a collection of Strapi attributes.\n * This is typically used for validating incoming data (e.g., from API requests).\n *\n * @param attributes - An array of tuples, where each tuple contains the attribute name and its schema definition.\n * @returns A Zod object schema representing the combined input attributes.\n *\n * @example\n * ```typescript\n * const myInputAttributes = [\n *   ['email', { type: 'email', required: true }],\n *   ['description', { type: 'text', minLength: 8 }],\n * ];\n * const inputSchema = createAttributesInputSchema(myInputAttributes);\n * // inputSchema will be a Zod object with 'email' and 'description' fields,\n * // mapped to Zod schemas suitable for input validation.\n * ```\n */\nexport const createAttributesInputSchema = (\n  attributes: [name: string, attribute: Schema.Attribute.AnyAttribute][]\n) => {\n  return attributes.reduce((acc, [name, attribute]) => {\n    return acc.extend({\n      get [name]() {\n        return mapAttributeToInputSchema(attribute);\n      },\n    });\n  }, z.object({}));\n};\n\n/**\n * Maps a Strapi attribute definition to a corresponding Zod validation schema.\n *\n * This function handles every Strapi attribute types and converts them into\n * appropriate Zod validation schemas.\n *\n * @param attribute - The Strapi attribute configuration object.\n * @returns A Zod schema that corresponds to the input attribute's type.\n * @throws {Error} Throws an error if an unsupported attribute type is provided.\n *\n * @example\n * ```typescript\n * const stringAttribute = { type: 'string', minLength: 3 };\n * const stringSchema = mapAttributeToSchema(stringAttribute); // Returns a Zod string schema with minLength.\n *\n * const booleanAttribute = { type: 'boolean', default: false };\n * const booleanSchema = mapAttributeToSchema(booleanAttribute); // Returns a Zod boolean schema with a default.\n * ```\n */\nexport const mapAttributeToSchema = (attribute: Schema.Attribute.AnyAttribute): z.ZodTypeAny => {\n  switch (attribute.type) {\n    case 'biginteger':\n      return attributes.bigIntegerToSchema(attribute);\n    case 'blocks':\n      return attributes.blocksToSchema();\n    case 'boolean':\n      return attributes.booleanToSchema(attribute);\n    case 'component':\n      return attributes.componentToSchema(attribute);\n    case 'date':\n      return attributes.dateToSchema(attribute);\n    case 'datetime':\n      return attributes.datetimeToSchema(attribute);\n    case 'decimal':\n      return attributes.decimalToSchema(attribute);\n    case 'dynamiczone':\n      return attributes.dynamicZoneToSchema(attribute);\n    case 'email':\n      return attributes.emailToSchema(attribute);\n    case 'enumeration':\n      return attributes.enumToSchema(attribute);\n    case 'float':\n      return attributes.floatToSchema(attribute);\n    case 'integer':\n      return attributes.integerToSchema(attribute);\n    case 'json':\n      return attributes.jsonToSchema(attribute);\n    case 'media':\n      return attributes.mediaToSchema(attribute);\n    case 'relation':\n      return attributes.relationToSchema(attribute);\n    case 'password':\n    case 'text':\n    case 'richtext':\n    case 'string':\n      return attributes.stringToSchema(attribute);\n    case 'time':\n      return attributes.timeToSchema(attribute);\n    case 'timestamp':\n      return attributes.timestampToSchema(attribute);\n    case 'uid':\n      return attributes.uidToSchema(attribute);\n    default: {\n      const { type } = attribute as Schema.Attribute.AnyAttribute;\n\n      throw new Error(`Unsupported attribute type: ${type}`);\n    }\n  }\n};\n\n/**\n * Maps a Strapi attribute definition to a corresponding Zod input validation schema.\n *\n * This function handles every Strapi attribute types and converts them into\n * appropriate Zod validation schemas with their respective constraints.\n *\n * @param attribute - The Strapi attribute configuration object. Contains type information\n *                   and validation rules for the attribute.\n *\n * @returns A Zod schema that corresponds to the input attribute's type and validation rules\n *\n * @example\n * ```typescript\n * // String attribute with constraints\n * const stringAttribute = {\n *   type: 'string',\n *   minLength: 3,\n *   maxLength: 50,\n *   required: true\n * };\n * const stringSchema = mapAttributeToInputSchema(stringAttribute);\n *\n * // Enumeration attribute\n * const enumAttribute = {\n *   type: 'enumeration',\n *   enum: ['draft', 'published', 'archived']\n * };\n * const enumSchema = mapAttributeToInputSchema(enumAttribute);\n *\n * // Media attribute with multiple files\n * const mediaAttribute = {\n *   type: 'media',\n *   multiple: true\n * };\n * const mediaSchema = mapAttributeToInputSchema(mediaAttribute);\n * ```\n *\n * @throws {Error} Throws an error if an unsupported attribute type is provided\n *\n */\nexport const mapAttributeToInputSchema = (\n  attribute: Schema.Attribute.AnyAttribute\n): z.ZodTypeAny => {\n  switch (attribute.type) {\n    case 'biginteger':\n      return attributes.bigIntegerToInputSchema(attribute);\n    case 'blocks':\n      return attributes.blocksToInputSchema();\n    case 'boolean':\n      return attributes.booleanToInputSchema(attribute);\n    case 'component':\n      return attributes.componentToInputSchema(attribute);\n    case 'date':\n      return attributes.dateToInputSchema(attribute);\n    case 'datetime':\n      return attributes.datetimeToInputSchema(attribute);\n    case 'decimal':\n      return attributes.decimalToInputSchema(attribute);\n    case 'dynamiczone':\n      return attributes.dynamicZoneToInputSchema(attribute);\n    case 'email':\n      return attributes.emailToInputSchema(attribute);\n    case 'enumeration':\n      return attributes.enumerationToInputSchema(attribute);\n    case 'float':\n      return attributes.floatToInputSchema(attribute);\n    case 'integer':\n      return attributes.integerToInputSchema(attribute);\n    case 'json':\n      return attributes.jsonToInputSchema(attribute);\n    case 'media':\n      return attributes.mediaToInputSchema(attribute);\n    case 'relation':\n      return attributes.relationToInputSchema(attribute);\n    case 'password':\n    case 'text':\n    case 'richtext':\n    case 'string':\n      return attributes.textToInputSchema(attribute);\n    case 'time':\n      return attributes.timeToInputSchema(attribute);\n    case 'timestamp':\n      return attributes.timestampToInputSchema(attribute);\n    case 'uid':\n      return attributes.uidToInputSchema(attribute);\n    default: {\n      const { type } = attribute as Schema.Attribute.AnyAttribute;\n\n      throw new Error(`Unsupported attribute type: ${type}`);\n    }\n  }\n};\n"],"names":["createAttributesSchema","attributes","reduce","acc","name","attribute","extend","mapAttributeToSchema","z","object","createAttributesInputSchema","mapAttributeToInputSchema","type","Error"],"mappings":"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"}